scalar DateTime

type Query {
	me: User
	users: [User!]!
	feed(skip: Int, first: Int): [Post!]!
	filterPosts(searchString: String): [Post!]!
	post(id: ID!): Post
	tracks: [Track!]!
	track(id: ID!): Track
}
type Track {
	id: ID
	name: String!
	module: [Module]
}
type Mutation {
	signup(email: String!, password: String!, name: String): AuthPayload!
	login(email: String!, password: String!): AuthPayload!
	createPost(title: String!, content: String!): Post!
	updatePost(title: String, content: String, id: ID!): Post
	deletePost(id: ID!): Post
	createTrack(name: String!): Track!
	createModule(id: String!, name: String!, info: String!): Module!
}

type Subscription {
	post: Post
}

type User {
	id: ID!
	name: String!
	email: String!
	posts: [Post!]!
}
type Module {
	id: ID
	name: String!
	info: String!
	track: Track!
}

type Post {
	id: ID!
	createdAt: DateTime!
	updatedAt: DateTime!
	published: Boolean!
	title: String!
	content: String
	author: User!
}

type AuthPayload {
	token: String!
	user: User!
}
